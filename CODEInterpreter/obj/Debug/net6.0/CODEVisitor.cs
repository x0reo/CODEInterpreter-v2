//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\a\Desktop\Interpreter\test\Content\CODE.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Interpreter.Content {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="CODEParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface ICODEVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantExpression([NotNull] CODEParser.ConstantExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>variablenameExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariablenameExpression([NotNull] CODEParser.VariablenameExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCallExpression([NotNull] CODEParser.FunctionCallExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparisonExpression([NotNull] CODEParser.ComparisonExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>logicalOpExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOpExpression([NotNull] CODEParser.LogicalOpExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicativeExpression([NotNull] CODEParser.MultiplicativeExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditiveExpression([NotNull] CODEParser.AdditiveExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>concatenateExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConcatenateExpression([NotNull] CODEParser.ConcatenateExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>newlineopExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNewlineopExpression([NotNull] CODEParser.NewlineopExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] CODEParser.ProgramContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLine([NotNull] CODEParser.LineContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] CODEParser.StatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.vardec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVardec([NotNull] CODEParser.VardecContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] CODEParser.AssignmentContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.assignmentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentList([NotNull] CODEParser.AssignmentListContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] CODEParser.FunctionCallContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] CODEParser.ConstantContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclarator([NotNull] CODEParser.DeclaratorContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.declaratorlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclaratorlist([NotNull] CODEParser.DeclaratorlistContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.whileBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileBlock([NotNull] CODEParser.WhileBlockContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] CODEParser.BlockContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] CODEParser.ExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.multOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultOp([NotNull] CODEParser.MultOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.addOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddOp([NotNull] CODEParser.AddOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.compareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompareOp([NotNull] CODEParser.CompareOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.logicalOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOp([NotNull] CODEParser.LogicalOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.concatOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConcatOp([NotNull] CODEParser.ConcatOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="CODEParser.assgnOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssgnOp([NotNull] CODEParser.AssgnOpContext context);
}
} // namespace Interpreter.Content
