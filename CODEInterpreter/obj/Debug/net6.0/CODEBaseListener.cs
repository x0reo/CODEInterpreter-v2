//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\a\Desktop\Interpreter\test\Content\CODE.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Interpreter.Content {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ICODEListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CODEBaseListener : ICODEListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstantExpression([NotNull] CODEParser.ConstantExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstantExpression([NotNull] CODEParser.ConstantExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>variablenameExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariablenameExpression([NotNull] CODEParser.VariablenameExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>variablenameExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariablenameExpression([NotNull] CODEParser.VariablenameExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCallExpression([NotNull] CODEParser.FunctionCallExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCallExpression([NotNull] CODEParser.FunctionCallExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComparisonExpression([NotNull] CODEParser.ComparisonExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComparisonExpression([NotNull] CODEParser.ComparisonExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>logicalOpExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalOpExpression([NotNull] CODEParser.LogicalOpExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalOpExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalOpExpression([NotNull] CODEParser.LogicalOpExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicativeExpression([NotNull] CODEParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicativeExpression([NotNull] CODEParser.MultiplicativeExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditiveExpression([NotNull] CODEParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditiveExpression([NotNull] CODEParser.AdditiveExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>concatenateExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConcatenateExpression([NotNull] CODEParser.ConcatenateExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>concatenateExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConcatenateExpression([NotNull] CODEParser.ConcatenateExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>newlineopExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewlineopExpression([NotNull] CODEParser.NewlineopExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>newlineopExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewlineopExpression([NotNull] CODEParser.NewlineopExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] CODEParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] CODEParser.ProgramContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLine([NotNull] CODEParser.LineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLine([NotNull] CODEParser.LineContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] CODEParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] CODEParser.StatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.vardec"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVardec([NotNull] CODEParser.VardecContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.vardec"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVardec([NotNull] CODEParser.VardecContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] CODEParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] CODEParser.AssignmentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.assignmentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignmentList([NotNull] CODEParser.AssignmentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.assignmentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignmentList([NotNull] CODEParser.AssignmentListContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] CODEParser.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] CODEParser.FunctionCallContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstant([NotNull] CODEParser.ConstantContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstant([NotNull] CODEParser.ConstantContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.declarator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclarator([NotNull] CODEParser.DeclaratorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.declarator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclarator([NotNull] CODEParser.DeclaratorContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.declaratorlist"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclaratorlist([NotNull] CODEParser.DeclaratorlistContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.declaratorlist"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclaratorlist([NotNull] CODEParser.DeclaratorlistContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.whileBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileBlock([NotNull] CODEParser.WhileBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.whileBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileBlock([NotNull] CODEParser.WhileBlockContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] CODEParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] CODEParser.BlockContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] CODEParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] CODEParser.ExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.multOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultOp([NotNull] CODEParser.MultOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.multOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultOp([NotNull] CODEParser.MultOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.addOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddOp([NotNull] CODEParser.AddOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.addOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddOp([NotNull] CODEParser.AddOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.compareOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompareOp([NotNull] CODEParser.CompareOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.compareOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompareOp([NotNull] CODEParser.CompareOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.logicalOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalOp([NotNull] CODEParser.LogicalOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.logicalOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalOp([NotNull] CODEParser.LogicalOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.concatOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConcatOp([NotNull] CODEParser.ConcatOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.concatOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConcatOp([NotNull] CODEParser.ConcatOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.assgnOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssgnOp([NotNull] CODEParser.AssgnOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.assgnOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssgnOp([NotNull] CODEParser.AssgnOpContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Interpreter.Content
