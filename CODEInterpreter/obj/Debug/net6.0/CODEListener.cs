//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\a\Desktop\Interpreter\test\Content\CODE.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Interpreter.Content {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="CODEParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface ICODEListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantExpression([NotNull] CODEParser.ConstantExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantExpression([NotNull] CODEParser.ConstantExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>variablenameExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariablenameExpression([NotNull] CODEParser.VariablenameExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>variablenameExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariablenameExpression([NotNull] CODEParser.VariablenameExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallExpression([NotNull] CODEParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallExpression([NotNull] CODEParser.FunctionCallExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonExpression([NotNull] CODEParser.ComparisonExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonExpression([NotNull] CODEParser.ComparisonExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>logicalOpExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOpExpression([NotNull] CODEParser.LogicalOpExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalOpExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOpExpression([NotNull] CODEParser.LogicalOpExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] CODEParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplicativeExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] CODEParser.MultiplicativeExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpression([NotNull] CODEParser.AdditiveExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>additiveExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpression([NotNull] CODEParser.AdditiveExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>concatenateExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcatenateExpression([NotNull] CODEParser.ConcatenateExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>concatenateExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcatenateExpression([NotNull] CODEParser.ConcatenateExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>newlineopExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewlineopExpression([NotNull] CODEParser.NewlineopExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>newlineopExpression</c>
	/// labeled alternative in <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewlineopExpression([NotNull] CODEParser.NewlineopExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] CODEParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] CODEParser.ProgramContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLine([NotNull] CODEParser.LineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLine([NotNull] CODEParser.LineContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] CODEParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] CODEParser.StatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.vardec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVardec([NotNull] CODEParser.VardecContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.vardec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVardec([NotNull] CODEParser.VardecContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] CODEParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] CODEParser.AssignmentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.assignmentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentList([NotNull] CODEParser.AssignmentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.assignmentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentList([NotNull] CODEParser.AssignmentListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] CODEParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] CODEParser.FunctionCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] CODEParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] CODEParser.ConstantContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarator([NotNull] CODEParser.DeclaratorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarator([NotNull] CODEParser.DeclaratorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.declaratorlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaratorlist([NotNull] CODEParser.DeclaratorlistContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.declaratorlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaratorlist([NotNull] CODEParser.DeclaratorlistContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.whileBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileBlock([NotNull] CODEParser.WhileBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.whileBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileBlock([NotNull] CODEParser.WhileBlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] CODEParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] CODEParser.BlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] CODEParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] CODEParser.ExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.multOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultOp([NotNull] CODEParser.MultOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.multOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultOp([NotNull] CODEParser.MultOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.addOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddOp([NotNull] CODEParser.AddOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.addOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddOp([NotNull] CODEParser.AddOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.compareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompareOp([NotNull] CODEParser.CompareOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.compareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompareOp([NotNull] CODEParser.CompareOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.logicalOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOp([NotNull] CODEParser.LogicalOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.logicalOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOp([NotNull] CODEParser.LogicalOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.concatOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcatOp([NotNull] CODEParser.ConcatOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.concatOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcatOp([NotNull] CODEParser.ConcatOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="CODEParser.assgnOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssgnOp([NotNull] CODEParser.AssgnOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CODEParser.assgnOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssgnOp([NotNull] CODEParser.AssgnOpContext context);
}
} // namespace Interpreter.Content
