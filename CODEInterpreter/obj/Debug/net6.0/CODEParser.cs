//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\a\Desktop\Interpreter\test\Content\CODE.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Interpreter.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CODEParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		WHILE=25, NEWLINEOP=26, DATATYPE=27, INTVAL=28, FLOATVAL=29, CHARVAL=30, 
		BOOLVAL=31, STRINGVAL=32, WS=33, NEWLINE=34, FUNCTIONNAME=35, VARIABLENAME=36, 
		COMMENT=37;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_vardec = 3, 
		RULE_assignment = 4, RULE_assignmentList = 5, RULE_functionCall = 6, RULE_constant = 7, 
		RULE_declarator = 8, RULE_declaratorlist = 9, RULE_whileBlock = 10, RULE_block = 11, 
		RULE_expression = 12, RULE_multOp = 13, RULE_addOp = 14, RULE_compareOp = 15, 
		RULE_logicalOp = 16, RULE_concatOp = 17, RULE_assgnOp = 18;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "vardec", "assignment", "assignmentList", 
		"functionCall", "constant", "declarator", "declaratorlist", "whileBlock", 
		"block", "expression", "multOp", "addOp", "compareOp", "logicalOp", "concatOp", 
		"assgnOp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'BEGIN CODE'", "'END CODE'", "'='", "':'", "','", "'('", "')'", 
		"'BEGIN WHILE'", "'END WHILE'", "'*'", "'/'", "'%'", "'+'", "'-'", "'>'", 
		"'<'", "'>='", "'<='", "'=='", "'<>'", "'AND'", "'OR'", "'NOT'", "'&'", 
		null, "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "WHILE", "NEWLINEOP", "DATATYPE", "INTVAL", "FLOATVAL", "CHARVAL", 
		"BOOLVAL", "STRINGVAL", "WS", "NEWLINE", "FUNCTIONNAME", "VARIABLENAME", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CODE.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CODEParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(CODEParser.NEWLINE, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; Match(T__0);
			State = 39; Match(NEWLINE);
			State = 41;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 40; line();
				}
				}
				State = 43;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHILE) | (1L << DATATYPE) | (1L << FUNCTIONNAME) | (1L << VARIABLENAME))) != 0) );
			State = 45; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			int _alt;
			State = 53;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DATATYPE:
			case FUNCTIONNAME:
			case VARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 47; statement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 50;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; whileBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(CODEParser.NEWLINE, 0); }
		public VardecContext vardec() {
			return GetRuleContext<VardecContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DATATYPE:
				{
				State = 55; vardec();
				}
				break;
			case VARIABLENAME:
				{
				State = 56; assignment();
				}
				break;
			case FUNCTIONNAME:
				{
				State = 57; functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 60; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardecContext : ParserRuleContext {
		public ITerminalNode DATATYPE() { return GetToken(CODEParser.DATATYPE, 0); }
		public DeclaratorlistContext declaratorlist() {
			return GetRuleContext<DeclaratorlistContext>(0);
		}
		public VardecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterVardec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitVardec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardecContext vardec() {
		VardecContext _localctx = new VardecContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_vardec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(DATATYPE);
			State = 63; declaratorlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentListContext assignmentList() {
			return GetRuleContext<AssignmentListContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; assignmentList();
			State = 66; Match(T__2);
			State = 67; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentListContext : ParserRuleContext {
		public ITerminalNode[] VARIABLENAME() { return GetTokens(CODEParser.VARIABLENAME); }
		public ITerminalNode VARIABLENAME(int i) {
			return GetToken(CODEParser.VARIABLENAME, i);
		}
		public AssignmentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterAssignmentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitAssignmentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentListContext assignmentList() {
		AssignmentListContext _localctx = new AssignmentListContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_assignmentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(VARIABLENAME);
			State = 74;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 70; Match(T__2);
					State = 71; Match(VARIABLENAME);
					}
					} 
				}
				State = 76;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode FUNCTIONNAME() { return GetToken(CODEParser.FUNCTIONNAME, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_functionCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(FUNCTIONNAME);
			State = 78; Match(T__3);
			State = 87;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 79; expression(0);
				State = 84;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 80; Match(T__4);
						State = 81; expression(0);
						}
						} 
					}
					State = 86;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTVAL() { return GetToken(CODEParser.INTVAL, 0); }
		public ITerminalNode FLOATVAL() { return GetToken(CODEParser.FLOATVAL, 0); }
		public ITerminalNode CHARVAL() { return GetToken(CODEParser.CHARVAL, 0); }
		public ITerminalNode BOOLVAL() { return GetToken(CODEParser.BOOLVAL, 0); }
		public ITerminalNode STRINGVAL() { return GetToken(CODEParser.STRINGVAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTVAL) | (1L << FLOATVAL) | (1L << CHARVAL) | (1L << BOOLVAL) | (1L << STRINGVAL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public ITerminalNode VARIABLENAME() { return GetToken(CODEParser.VARIABLENAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_declarator);
		try {
			State = 95;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; Match(VARIABLENAME);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; Match(VARIABLENAME);
				State = 93; Match(T__2);
				State = 94; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorlistContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public DeclaratorlistContext declaratorlist() {
			return GetRuleContext<DeclaratorlistContext>(0);
		}
		public DeclaratorlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaratorlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterDeclaratorlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitDeclaratorlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaratorlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorlistContext declaratorlist() {
		DeclaratorlistContext _localctx = new DeclaratorlistContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_declaratorlist);
		try {
			State = 102;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97; declarator();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98; declarator();
				State = 99; Match(T__4);
				State = 100; declaratorlist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(CODEParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(CODEParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(CODEParser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(WHILE);
			State = 105; Match(T__5);
			State = 106; expression(0);
			State = 107; Match(T__6);
			State = 108; Match(NEWLINE);
			State = 109; Match(T__7);
			State = 110; Match(NEWLINE);
			State = 111; block();
			State = 112; Match(NEWLINE);
			State = 113; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHILE) | (1L << DATATYPE) | (1L << FUNCTIONNAME) | (1L << VARIABLENAME))) != 0)) {
				{
				{
				State = 115; line();
				}
				}
				State = 120;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariablenameExpressionContext : ExpressionContext {
		public ITerminalNode VARIABLENAME() { return GetToken(CODEParser.VARIABLENAME, 0); }
		public VariablenameExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterVariablenameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitVariablenameExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariablenameExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareOpContext compareOp() {
			return GetRuleContext<CompareOpContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOpExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOpContext logicalOp() {
			return GetRuleContext<LogicalOpContext>(0);
		}
		public LogicalOpExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterLogicalOpExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitLogicalOpExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOpExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenateExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConcatOpContext concatOp() {
			return GetRuleContext<ConcatOpContext>(0);
		}
		public ConcatenateExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterConcatenateExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitConcatenateExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewlineopExpressionContext : ExpressionContext {
		public ITerminalNode NEWLINEOP() { return GetToken(CODEParser.NEWLINEOP, 0); }
		public NewlineopExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterNewlineopExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitNewlineopExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewlineopExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTVAL:
			case FLOATVAL:
			case CHARVAL:
			case BOOLVAL:
			case STRINGVAL:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 122; constant();
				}
				break;
			case VARIABLENAME:
				{
				_localctx = new VariablenameExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 123; Match(VARIABLENAME);
				}
				break;
			case FUNCTIONNAME:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 124; functionCall();
				}
				break;
			case NEWLINEOP:
				{
				_localctx = new NewlineopExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 125; Match(NEWLINEOP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 150;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 148;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
					case 1:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 128;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 129; compareOp();
						State = 130; expression(7);
						}
						break;

					case 2:
						{
						_localctx = new LogicalOpExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 132;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 133; logicalOp();
						State = 134; expression(6);
						}
						break;

					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 136;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 137; multOp();
						State = 138; expression(5);
						}
						break;

					case 4:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 140;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 141; addOp();
						State = 142; expression(4);
						}
						break;

					case 5:
						{
						_localctx = new ConcatenateExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 144;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 145; concatOp();
						State = 146; expression(3);
						}
						break;
					}
					} 
				}
				State = 152;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_la = _input.La(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOpContext : ParserRuleContext {
		public CompareOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterCompareOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitCompareOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOpContext compareOp() {
		CompareOpContext _localctx = new CompareOpContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_compareOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOpContext : ParserRuleContext {
		public LogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterLogicalOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitLogicalOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOpContext logicalOp() {
		LogicalOpContext _localctx = new LogicalOpContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_logicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatOpContext : ParserRuleContext {
		public ConcatOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterConcatOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitConcatOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatOpContext concatOp() {
		ConcatOpContext _localctx = new ConcatOpContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_concatOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssgnOpContext : ParserRuleContext {
		public AssgnOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assgnOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.EnterAssgnOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICODEListener typedListener = listener as ICODEListener;
			if (typedListener != null) typedListener.ExitAssgnOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICODEVisitor<TResult> typedVisitor = visitor as ICODEVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssgnOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssgnOpContext assgnOp() {
		AssgnOpContext _localctx = new AssgnOpContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_assgnOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);

		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 3);

		case 4: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\'\xA8\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2\x3"+
		"\x2\x6\x2,\n\x2\r\x2\xE\x2-\x3\x2\x3\x2\x3\x3\x6\x3\x33\n\x3\r\x3\xE\x3"+
		"\x34\x3\x3\x5\x3\x38\n\x3\x3\x4\x3\x4\x3\x4\x5\x4=\n\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\aK\n\a\f\a\xE"+
		"\aN\v\a\x3\b\x3\b\x3\b\x3\b\x3\b\a\bU\n\b\f\b\xE\bX\v\b\x5\bZ\n\b\x3\t"+
		"\x3\t\x3\n\x3\n\x3\n\x3\n\x5\n\x62\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x5\vi"+
		"\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\a\rw"+
		"\n\r\f\r\xE\rz\v\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x81\n\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x97\n\xE\f\xE\xE\xE"+
		"\x9A\v\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13"+
		"\x3\x13\x3\x14\x3\x14\x3\x14\x2\x2\x3\x1A\x15\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2\x2\a\x3\x2\x1E\"\x3\x2\f\xE\x3\x2\xF\x10\x3\x2\x11\x16"+
		"\x3\x2\x17\x19\xA7\x2(\x3\x2\x2\x2\x4\x37\x3\x2\x2\x2\x6<\x3\x2\x2\x2"+
		"\b@\x3\x2\x2\x2\n\x43\x3\x2\x2\x2\fG\x3\x2\x2\x2\xEO\x3\x2\x2\x2\x10["+
		"\x3\x2\x2\x2\x12\x61\x3\x2\x2\x2\x14h\x3\x2\x2\x2\x16j\x3\x2\x2\x2\x18"+
		"x\x3\x2\x2\x2\x1A\x80\x3\x2\x2\x2\x1C\x9B\x3\x2\x2\x2\x1E\x9D\x3\x2\x2"+
		"\x2 \x9F\x3\x2\x2\x2\"\xA1\x3\x2\x2\x2$\xA3\x3\x2\x2\x2&\xA5\x3\x2\x2"+
		"\x2()\a\x3\x2\x2)+\a$\x2\x2*,\x5\x4\x3\x2+*\x3\x2\x2\x2,-\x3\x2\x2\x2"+
		"-+\x3\x2\x2\x2-.\x3\x2\x2\x2./\x3\x2\x2\x2/\x30\a\x4\x2\x2\x30\x3\x3\x2"+
		"\x2\x2\x31\x33\x5\x6\x4\x2\x32\x31\x3\x2\x2\x2\x33\x34\x3\x2\x2\x2\x34"+
		"\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x38\x3\x2\x2\x2\x36\x38\x5\x16"+
		"\f\x2\x37\x32\x3\x2\x2\x2\x37\x36\x3\x2\x2\x2\x38\x5\x3\x2\x2\x2\x39="+
		"\x5\b\x5\x2:=\x5\n\x6\x2;=\x5\xE\b\x2<\x39\x3\x2\x2\x2<:\x3\x2\x2\x2<"+
		";\x3\x2\x2\x2=>\x3\x2\x2\x2>?\a$\x2\x2?\a\x3\x2\x2\x2@\x41\a\x1D\x2\x2"+
		"\x41\x42\x5\x14\v\x2\x42\t\x3\x2\x2\x2\x43\x44\x5\f\a\x2\x44\x45\a\x5"+
		"\x2\x2\x45\x46\x5\x1A\xE\x2\x46\v\x3\x2\x2\x2GL\a&\x2\x2HI\a\x5\x2\x2"+
		"IK\a&\x2\x2JH\x3\x2\x2\x2KN\x3\x2\x2\x2LJ\x3\x2\x2\x2LM\x3\x2\x2\x2M\r"+
		"\x3\x2\x2\x2NL\x3\x2\x2\x2OP\a%\x2\x2PY\a\x6\x2\x2QV\x5\x1A\xE\x2RS\a"+
		"\a\x2\x2SU\x5\x1A\xE\x2TR\x3\x2\x2\x2UX\x3\x2\x2\x2VT\x3\x2\x2\x2VW\x3"+
		"\x2\x2\x2WZ\x3\x2\x2\x2XV\x3\x2\x2\x2YQ\x3\x2\x2\x2YZ\x3\x2\x2\x2Z\xF"+
		"\x3\x2\x2\x2[\\\t\x2\x2\x2\\\x11\x3\x2\x2\x2]\x62\a&\x2\x2^_\a&\x2\x2"+
		"_`\a\x5\x2\x2`\x62\x5\x1A\xE\x2\x61]\x3\x2\x2\x2\x61^\x3\x2\x2\x2\x62"+
		"\x13\x3\x2\x2\x2\x63i\x5\x12\n\x2\x64\x65\x5\x12\n\x2\x65\x66\a\a\x2\x2"+
		"\x66g\x5\x14\v\x2gi\x3\x2\x2\x2h\x63\x3\x2\x2\x2h\x64\x3\x2\x2\x2i\x15"+
		"\x3\x2\x2\x2jk\a\x1B\x2\x2kl\a\b\x2\x2lm\x5\x1A\xE\x2mn\a\t\x2\x2no\a"+
		"$\x2\x2op\a\n\x2\x2pq\a$\x2\x2qr\x5\x18\r\x2rs\a$\x2\x2st\a\v\x2\x2t\x17"+
		"\x3\x2\x2\x2uw\x5\x4\x3\x2vu\x3\x2\x2\x2wz\x3\x2\x2\x2xv\x3\x2\x2\x2x"+
		"y\x3\x2\x2\x2y\x19\x3\x2\x2\x2zx\x3\x2\x2\x2{|\b\xE\x1\x2|\x81\x5\x10"+
		"\t\x2}\x81\a&\x2\x2~\x81\x5\xE\b\x2\x7F\x81\a\x1C\x2\x2\x80{\x3\x2\x2"+
		"\x2\x80}\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x80\x7F\x3\x2\x2\x2\x81\x98\x3\x2"+
		"\x2\x2\x82\x83\f\b\x2\x2\x83\x84\x5 \x11\x2\x84\x85\x5\x1A\xE\t\x85\x97"+
		"\x3\x2\x2\x2\x86\x87\f\a\x2\x2\x87\x88\x5\"\x12\x2\x88\x89\x5\x1A\xE\b"+
		"\x89\x97\x3\x2\x2\x2\x8A\x8B\f\x6\x2\x2\x8B\x8C\x5\x1C\xF\x2\x8C\x8D\x5"+
		"\x1A\xE\a\x8D\x97\x3\x2\x2\x2\x8E\x8F\f\x5\x2\x2\x8F\x90\x5\x1E\x10\x2"+
		"\x90\x91\x5\x1A\xE\x6\x91\x97\x3\x2\x2\x2\x92\x93\f\x4\x2\x2\x93\x94\x5"+
		"$\x13\x2\x94\x95\x5\x1A\xE\x5\x95\x97\x3\x2\x2\x2\x96\x82\x3\x2\x2\x2"+
		"\x96\x86\x3\x2\x2\x2\x96\x8A\x3\x2\x2\x2\x96\x8E\x3\x2\x2\x2\x96\x92\x3"+
		"\x2\x2\x2\x97\x9A\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2"+
		"\x99\x1B\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9B\x9C\t\x3\x2\x2\x9C\x1D\x3"+
		"\x2\x2\x2\x9D\x9E\t\x4\x2\x2\x9E\x1F\x3\x2\x2\x2\x9F\xA0\t\x5\x2\x2\xA0"+
		"!\x3\x2\x2\x2\xA1\xA2\t\x6\x2\x2\xA2#\x3\x2\x2\x2\xA3\xA4\a\x1A\x2\x2"+
		"\xA4%\x3\x2\x2\x2\xA5\xA6\a\x5\x2\x2\xA6\'\x3\x2\x2\x2\xF-\x34\x37<LV"+
		"Y\x61hx\x80\x96\x98";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Interpreter.Content
